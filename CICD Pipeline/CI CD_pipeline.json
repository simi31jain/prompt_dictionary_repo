{
    "Domain Category": "CI/CD Pipeline - Branch & Code Analysis",
    "Technology involved": "Version Control System, Secure Auth, Environment Variables, Static Code Analysis",
    "Custom Prompt": [
      "Create a CI/CD pipeline with the following features:\n\nBranch Parameter Selection:\n- Include a mechanism to allow users to select a branch from a version control system like <VERSION_CONTROL_SYSTEM>.\n- Provide a filter option to list and select specific branches.\n- Use secure authentication to access the <VERSION_CONTROL_SYSTEM>.\n\nEnvironment Variable Management:\n- Securely retrieve and manage credentials required for the pipeline tasks.\n- Define environment variables like project-related metadata (e.g., <PROJECT_NAME>, <PROJECT_KEY>).\n- Use platform-agnostic methods to dynamically extract branch-specific values (e.g., <BRANCH_ARTIFACT_NAME>, <BRANCH_ID>), with string manipulation techniques where necessary.\n\nStatic Code Analysis Integration:\n- Implement a code analysis step that runs conditionally (e.g., only on <PULL_REQUEST>).\n- Use a code analysis tool (e.g., static code analysis or linting) appropriate for the project, with version management.\n- Set up the necessary environment variables and configuration for the tool, ensuring integration with the pipeline.\n- Ensure the tool supports branch and pull request-specific flags to analyze relevant changes.\n\nGeneral Configuration:\n- Ensure the pipeline is adaptable to various programming languages, frameworks, and build environments (e.g., <LANGUAGES_LIST>).\n- The pipeline should dynamically use the latest versions of any required tools or dependencies.\n- Include steps to retrieve and process key information about the version control branch <BRANCH_NAME> being used, ensuring the pipeline is applicable to various repositories."
    ]
  },
  
  {
    "Domain Category": "CI/CD Pipeline - Scheduled Monitoring",
    "Technology involved": "Cloud Provider Integration, Scheduled Trigger, Monitoring/Alerting",
    "Custom Prompt": [
      "Create a CI/CD pipeline with the following features:\n\nScheduled Trigger: Configure the pipeline to run daily at <TIME_SCHEDULE> (e.g., 5 AM UTC).\n\nCloud Service Integration:\n- Securely authenticate with the appropriate cloud provider using <CLOUD_CREDENTIALS> or environment variables.\n- Retrieve and manage monitoring or alerting configurations (e.g., <ALARM_NAME>) related to a specific resource, filtered by a prefix provided by the user.\n\nParameterization:\n- Include a configurable parameter that accepts a resource name prefix (e.g., <RESOURCE_PREFIX>).\n- Use this prefix to filter and target the relevant resources in the cloud provider's monitoring service.\n\nEnable Monitoring:\n- For each filtered resource, perform actions to enable or configure monitoring, ensuring it is activated.\n\nLogging and Error Handling:\n- Log the actions taken for each resource for traceability.\n- Implement proper error handling to ensure failures are logged and do not disrupt the rest of the pipeline."
    ]
  },

  {
    "Domain Category": "CI/CD Pipeline - VM Management",
    "Technology involved": "Cloud Provider Integration, Scheduled Trigger, VM Control",
    "Custom Prompt": [
      "Create a CI/CD pipeline with the following functionalities:\n\nScheduled Trigger: Configure the pipeline to run on a specific schedule (e.g., <DAILY_SCHEDULE> or triggered manually).\n\nCloud Service Integration:\n- Securely authenticate with the appropriate cloud provider using <CLOUD_CREDENTIALS> or environment variables.\n- Retrieve and manage virtual machine instances based on a name prefix provided by the user.\n\nParameterization:\n- Include a configurable parameter that accepts an instance name prefix (e.g., <INSTANCE_PREFIX>).\n- Use this prefix to filter and identify relevant instances in the cloud provider.\n\nStart and Stop Instances:\n- Provide steps to either start or stop all instances that match the given prefix.\n- The action (<START_OR_STOP>) should be configurable based on pipeline parameters or environment conditions.\n\nLogging and Error Handling:\n- Log all actions taken, such as starting or stopping instances, for auditing purposes.\n- Handle errors gracefully and log failures to ensure issues are traceable."
    ]
  },

  {
    "Domain Category": "CI/CD Jenkins Pipeline - Docker & Kubernetes",
    "Technology involved": "Docker, Kubernetes, Git, Jenkins",
    "Custom Prompt": [
      "CI/CD Jenkins pipeline to deploy a Docker container to a Kubernetes cluster.\n\nCreate a CI/CD pipeline with the following features:\n\nBranch Parameter Selection:\n- Allow users to select the branch from a version control system (e.g., <GIT_PROVIDER>).\n- Provide a filter to list and select specific branches.\n- Use secure authentication to access the <GIT_PROVIDER>.\n\nEnvironment Variable Management:\n- Securely retrieve and manage Kubernetes cluster credentials and Docker registry credentials.\n- Define project-related metadata (e.g., <PROJECT_NAME>, <CONTAINER_NAME>, <IMAGE_TAG>).\n- Use platform-agnostic methods to dynamically extract branch-specific values (e.g., <DOCKER_IMAGE_TAG>, <K8S_NAMESPACE>).\n\nDocker Image Build and Push:\n- Build the Docker image dynamically based on the selected branch.\n- Push the Docker image to a Docker registry (e.g., <DOCKER_REGISTRY>).\n\nKubernetes Deployment:\n- Deploy the Docker container to a Kubernetes cluster.\n- Handle environment-specific configuration using Kubernetes manifests or Helm charts.\n- Support rollbacks and safe deployments to Kubernetes.\n\nGeneral Configuration:\n- The pipeline should be adaptable for different programming languages and frameworks.\n- Ensure secure and automated handling of sensitive information such as <API_KEYS>, Kubernetes credentials, and Docker registry credentials."
    ]
  },
  
  {
    "Domain Category": "CI/CD Pipeline - AWS Elastic Beanstalk",
    "Technology involved": "Git, AWS CLI, AWS Elastic Beanstalk",
    "Custom Prompt": [
      "CI/CD Pipeline to automate the deployment of application to AWS Elastic Beanstalk:\n\nCreate a CI/CD pipeline with the following features:\n\n1. Branch Parameter Selection:\n   - Allow users to select the branch from a version control system (e.g., <GIT_PROVIDER>).\n   - Provide a filter option to list and select specific branches.\n   - Use secure authentication to access the <GIT_PROVIDER>.\n\n2. Environment Variable Management:\n   - Securely retrieve and manage <AWS_CREDENTIALS> and Elastic Beanstalk application credentials.\n   - Define project-related metadata (e.g., <PROJECT_NAME>, <APPLICATION_NAME>, <ENVIRONMENT_NAME>, <VERSION_LABEL>).\n   - Use platform-agnostic methods to dynamically extract branch-specific values (e.g., dynamic version label for the Elastic Beanstalk application).\n\n3. Build Application:\n   - Build the application dynamically based on the selected branch.\n   - Run appropriate build steps for the application (e.g., <BUILD_COMMAND> for Node.js or <MAVEN_COMMAND> for Java).\n   - Package the application into a format supported by AWS Elastic Beanstalk (e.g., <ZIP_FILE>, <JAR_FILE>).\n\n4. AWS Elastic Beanstalk Deployment:\n   - Deploy the built application to AWS Elastic Beanstalk using AWS CLI or AWS SDK.\n   - Handle environment-specific configuration using Elastic Beanstalk environments.\n   - Support rollback and safe deployment strategies to Elastic Beanstalk.\n\n5. General Configuration:\n   - Ensure the pipeline is adaptable for different programming languages and frameworks (e.g., <LANGUAGES_LIST>).\n   - Ensure secure and automated handling of sensitive information such as <AWS_API_KEYS>, environment variables, and application credentials.\n\nAdditional Requirements:\n   - Use AWS CLI for interaction with AWS services.\n   - Use AWS Elastic Beanstalk environment configuration to define the application environment and related variables.\n   - Integrate AWS Elastic Beanstalk Health Checks to monitor the status of the deployment.\n   - Ensure that the pipeline can handle multiple environments (e.g., <DEV_ENV>, <STAGING_ENV>, <PROD_ENV>)."
    ]
  }